using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LeetCodePractice
{
    class CriticalConnections
    {
        private int time = 0;

        public IList<IList<int>> CriticalConnections1(int n, IList<IList<int>> connections)
        {

            IList<IList<int>> bridge = new List<IList<int>>();

            // build the graph
            Dictionary<int, List<int>> graph = new Dictionary<int, List<int>>();
            foreach (var connection in connections)
            {
                int node1 = connection[0];
                int node2 = connection[1];

                if (!graph.ContainsKey(node1))
                    graph[node1] = new List<int>();
                if (!graph.ContainsKey(node2))
                    graph[node2] = new List<int>();

                graph[node1].Add(node2);
                graph[node2].Add(node1);
            }

            int[] disc = new int[n]; // node id generated by DFS search
            int[] low = new int[n];  // smallest node id that current node can be reached from
            //Array.Fill(disc, -1);    // -1 denotes the node is not visted
            disc = Enumerable.Repeat(-1, disc.Length).ToArray();

            // traverse the graph
            for (int i = 0; i < n; i++)
            {
                if (disc[i] == -1)
                    DFS(i, i, disc, low, graph, bridge);
            }

            return bridge;
        }

        private void DFS(int u, int parent, int[] disc, int[] low, Dictionary<int, List<int>> graph, IList<IList<int>> bridge)
        {
            disc[u] = time;
            low[u] = time;
            time++;

            for (int i = 0; i < graph[u].Count; i++)
            {
                int v = graph[u][i];

                if (v == parent)
                    continue;
                if (disc[v] == -1)
                {
                    // node v is not visited, keep DFS traverse
                    DFS(v, u, disc, low, graph, bridge);

                    // update the low-link value for u
                    low[u] = Math.Min(low[u], low[v]);

                    if (low[v] > disc[u])
                        bridge.Add(new List<int> { u, v });
                }
                else
                {
                    // if v is already visited, then u-v is a back-edge in the DFS tree.
                    // low stores the min node id from the subtree of u, so use disv[v] here.
                    low[u] = Math.Min(low[u], disc[v]);
                }
            }
        }
    }
}
